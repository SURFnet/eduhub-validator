;; SPDX-FileCopyrightText: 2024, 2025 SURF B.V.
;; SPDX-License-Identifier: EPL-2.0 WITH Classpath-exception-2.0
;; SPDX-FileContributor: Jelmer de Ronde

{:openapi-spec "eduxchange.openapi.json"
 :seeds
 [{:method "get"
   :path   "/courses"
   :query-params {"consumer" "eduxchange"}
   "pageSize" "250"}
  {:method "get"
   :path   "/organizations"
   :query-params {"consumer" "eduxchange"}
   "organizationType" "root"}
  {:method "get"
   :path   "/programs"
   :query-params {"consumer" "eduxchange"}
   "programType" "minor"
   "pageSize" "250"}]

 :rules
 [ ;; page through items list for any kind of entity
  {:match     [[:request :method, "get"]
               [:request :path ?path]
               [:response :status 200]
               [:response, :body, "pageNumber", ?pageNumber]
               [:response, :body, "hasNextPage", true]]
   :generates [{:method       "get"
                :path         ?path
                ;; params must be passed as strings
                :query-params {"pageNumber" "{(inc ?pageNumber)}"}}]}

  {:match     [[:request, :method, "get"]
               [:response :status 200]
               [:response, :body, "items", ?i "courseId" ?id]]
   :generates [{:method "get"
                :path   "/courses/{?id}"
                :query-params {"consumer" "eduxchange"
                               "expand" "coordinators"}}
               {:method "get"
                :path   "/courses/{?id}/offerings"
                :query-params {"consumer" "eduxchange"}}]}

  ;; from any kind of offering
  {:match     [[:request, :method, "get"]
               [:response :status 200]
               [:response, :body, "items", ?i "offeringId" ?id]]
   :generates [{:method "get"
                :path   "/offerings/{?id}"
                :query-params {"consumer" "eduxchange"
                               "expand" "academicSession"}}]}

  {:match     [[:request, :method, "get"]
               [:response :status 200]
               [:response, :body, "items", ?i "programId" ?id]]
   :generates [{:method "get"
                :path   "/programs/{?id}"
                :query-params {"consumer" "eduxchange"
                               "expand" "coordinators,organization"}}
               {:method "get"
                :path   "/programs/{?id}/offerings"
                :query-params {"consumer" "eduxchange"}}]}]}
